/*
 * Copyright (c) 2011-2012 Julien Nicoulaud <julien.nicoulaud@gmail.com>
 *
 * This file is part of idea-byteman.
 *
 * idea-byteman is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * idea-byteman is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with idea-byteman.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Parser grammar definition for Byteman.
 * <p/>
 * Derived from Byteman project's <code>ECAGrammar.cup</code> and source code.
 *
 * @author <a href="mailto:julien.nicoulaud@gmail.com">Julien Nicoulaud</a>
 * @since 0.1
 */
{
  parserClass="net.nicoulaj.idea.byteman.lang.parser.BytemanParser"
  stubParserClass="net.nicoulaj.idea.byteman.lang.parser.BytemanParserUtil"
  implements="net.nicoulaj.idea.byteman.lang.psi.BytemanPsiElement"
  extends="net.nicoulaj.idea.byteman.lang.psi.impl.BytemanPsiElementImpl"
  psiClassPrefix="Byteman"
  psiImplClassSuffix="Impl"
  psiPackage="net.nicoulaj.idea.byteman.lang.psi"
  psiImplPackage="net.nicoulaj.idea.byteman.lang.psi.impl"
  elementTypeHolderClass="net.nicoulaj.idea.byteman.lang.BytemanTypes"
  elementTypePrefix=""
  elementTypeClass="net.nicoulaj.idea.byteman.lang.psi.BytemanElementType"
  tokenTypeClass="net.nicoulaj.idea.byteman.lang.lexer.BytemanTokenType"
}

script ::=
  rule*

rule ::=
  KEYWORD_RULE RULE_NAME
  KEYWORD_IF condition
  KEYWORD_DO actions
  KEYWORD_ENDRULE {
    implements("rule")="net.nicoulaj.idea.byteman.lang.psi.BytemanPsiNamedElement"
    mixin("rule")="net.nicoulaj.idea.byteman.lang.psi.impl.BytemanRuleBase"
  }

// SANDBOX

rule2 ::=
  (KEYWORD_RULE RULE_NAME)?
  (KEYWORD_HELPER CLASS_REF)?
  (KEYWORD_CLASS OVERRIDE? CLASS_REF)?
  (KEYWORD_METHOD METHOD_REF)?
  (KEYWORD_LINE INTEGER_LITERAL)?
  (KEYWORD_BIND event)?
  KEYWORD_IF condition
  KEYWORD_DO actions
  KEYWORD_ENDRULE?
  COMMENT

event ::=
  KEYWORD_NOTHING | bindings

bindings ::=
    binding ( (COMMA|SEMI) bindings | SEMI? )

binding	::=
  bind_sym ASSIGN expr

bind_sym ::=
  simple_name (COLON typename)?

typename ::=
  identifier_name arraydims?

arraydims ::=
  LSQUARE RSQUARE arraydims?

condition ::=
  expr

actions ::=
  KEYWORD_NOTHING | action_expr_list

action_expr_list ::=
  expr (SEMI|COMMA) action_expr_list | action_expr

action_expr ::=
  expr | throw_return_expr SEMI?

throw_return_expr ::=
  KEYWORD_RETURN expr? | KEYWORD_THROW KEYWORD_NEW? identifier_name LPAREN expr_list? RPAREN

private expr_list ::=
	expr ((COMMA|SEMI) expr)*

expr ::=
	(
  	unary_oper_expr
  	|	array_expr
  	|	field_expr
  	|	meth_expr
  	| new_expr
  	|	simple_expr
  	| null_expr
  	|	simple_name
  	| (simple_name|DOLLAR|field_expr|array_expr) ASSIGN expr
  )
	(
	  (TERN_IF expr COLON expr)
	  | ((OR|AND|LT|LE|EQ|NE|GE|GT|BOR|BAND|BXOR|PLUS|MINUS|MUL|DIV|MOD) expr)
	)*

unary_oper_expr ::=
  (NOT|TWIDDLE|MINUS) expr

array_expr ::=
  (simple_expr|simple_name|field_expr|meth_expr) array_idx_list

array_idx_list ::=
  array_idx array_idx_list?

array_idx ::=	LSQUARE expr RSQUARE

field_expr
	::=	path DOT simple_name
	|	(simple_expr|meth_expr) (DOT simple_name)+

meth_expr
	  ::=	( ((path|simple_expr) DOT)* simple_name LPAREN expr_list? RPAREN )+

new_expr
  ::= KEYWORD_NEW identifier_name ( new_array_idx_list | LPAREN expr_list? RPAREN )

new_array_idx_list
  ::= (LSQUARE expr? RSQUARE)+

simple_expr ::=
    INTEGER_LITERAL
	|	FLOAT_LITERAL
	|	BOOLEAN_LITERAL
	|	STRING_LITERAL
	|	DOLLAR
	|	LPAREN expr RPAREN

null_expr
    ::=	NULL_LITERAL

identifier_name
  ::=	simple_name
	|	path DOT IDENTIFIER

simple_name
	::=	IDENTIFIER

path ::= (IDENTIFIER DOT)* IDENTIFIER
