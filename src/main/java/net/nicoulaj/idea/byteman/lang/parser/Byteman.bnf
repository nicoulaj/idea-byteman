/*
 * Copyright (c) 2011-2012 Julien Nicoulaud <julien.nicoulaud@gmail.com>
 *
 * This file is part of idea-byteman.
 *
 * idea-byteman is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * idea-byteman is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with idea-byteman.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Parser grammar definition for Byteman.
 * <p/>
 * Derived from Byteman project's <code>ECAGrammar.cup</code> and source code.
 *
 * @author <a href="mailto:julien.nicoulaud@gmail.com">Julien Nicoulaud</a>
 * @since 0.1
 */
{
  parserClass="net.nicoulaj.idea.byteman.lang.parser.BytemanParser"
  stubParserClass="net.nicoulaj.idea.byteman.lang.parser.BytemanParserUtil"
  implements="net.nicoulaj.idea.byteman.lang.psi.BytemanPsiElement"
  extends="net.nicoulaj.idea.byteman.lang.psi.impl.BytemanPsiElementImpl"
  psiClassPrefix="Byteman"
  psiImplClassSuffix="Impl"
  psiPackage="net.nicoulaj.idea.byteman.lang.psi"
  psiImplPackage="net.nicoulaj.idea.byteman.lang.psi.impl"
  elementTypeHolderClass="net.nicoulaj.idea.byteman.lang.BytemanTypes"
  elementTypePrefix=""
  elementTypeClass="net.nicoulaj.idea.byteman.lang.psi.BytemanElementType"
  tokenTypeClass="net.nicoulaj.idea.byteman.lang.lexer.BytemanTokenType"
  tokens = [
    KEYWORD_BIND="BIND"
    KEYWORD_IF="IF"
    KEYWORD_DO="DO"
    KEYWORD_RULE="RULE"
    KEYWORD_CLASS="CLASS"
    KEYWORD_INTERFACE="INTERFACE"
    KEYWORD_METHOD="METHOD"
    KEYWORD_HELPER="HELPER"
    KEYWORD_LINE="LINE"
    KEYWORD_ENDRULE="ENDRULE"
    KEYWORD_NOTHING="NOTHING"
    KEYWORD_RETURN="return"
    KEYWORD_THROW="throw"
    KEYWORD_NEW="new"
    KEYWORD_AFTER="AFTER"
    KEYWORD_ALL="ALL"
    KEYWORD_AT="AT"
    KEYWORD_ENTRY="ENTRY"
    KEYWORD_INVOKE="INVOKE"
    KEYWORD_READ="READ"
    KEYWORD_SYNCHRONIZE="SYNCHRONIZE"
    KEYWORD_WRITE="WRITE"
    LPAREN="("
    RPAREN=")"
    LSQUARE="["
    RSQUARE="]"
    SEMI=";"
    COMMA=","
    DOT="."
    ASSIGN="="
    OR="||"
    AND="&&"
    NOT="!"
    LT="<"
    LE="<="
    EQ="=="
    NE="!="
    GE=">="
    GT=">"
    URSH=">>>"
    RSH=">>"
    LSH="<<"
    BOR="|"
    BAND="&"
    BXOR="^"
    TWIDDLE="~"
    MUL="*"
    DIV="/"
    PLUS="+"
    MINUS="-"
    MOD="%"
    TERN_IF="?"
    COLON=":"
    DOLLAR="$identifier"
    NULL_LITERAL="null"
    IDENTIFIER="identifier"
    BOOLEAN_LITERAL="boolean"
    INTEGER_LITERAL="integer"
    FLOAT_LITERAL="float"
    STRING_LITERAL="string"
    COMMENT="comment"
    RULE_NAME="rule name"
    OVERRIDE="^"
    CLASS_REF="class reference"
    METHOD_REF="method reference"
  ]
}

external script ::=
  parseScript script_element

private script_element ::=
  COMMENT | helper_statement | rule
  { recoverUntil=script_element_recover }
  private script_element_recover::=!KEYWORD_RULE

rule ::=
  KEYWORD_RULE RULE_NAME
  rule_body
  KEYWORD_ENDRULE
  { implements="net.nicoulaj.idea.byteman.lang.psi.BytemanPsiNamedElement"
    mixin="net.nicoulaj.idea.byteman.lang.psi.impl.AbstractBytemanRuleImpl"
    pin=1 }

private rule_body ::= // FIXME Statements order is not enforced, this represents only a few combinations => use external parsing
   helper_statement? class_statement method_statement location_statement?                     bind_statement? if_statement do_statement
 |                   class_statement method_statement location_statement? helper_statement?   bind_statement? if_statement do_statement
 |                   class_statement method_statement helper_statement?   location_statement? bind_statement? if_statement do_statement
 |                   class_statement method_statement location_statement?                     bind_statement? if_statement do_statement helper_statement?

class_statement ::=
  (KEYWORD_CLASS|KEYWORD_INTERFACE) OVERRIDE? class_name
  { implements="net.nicoulaj.idea.byteman.lang.psi.BytemanClassStatementBase"
    mixin="net.nicoulaj.idea.byteman.lang.psi.impl.AbstractBytemanClassStatementImpl" }

method_statement ::=
  KEYWORD_METHOD METHOD_REF

bind_statement ::=
  KEYWORD_BIND event

if_statement ::=
  KEYWORD_IF condition

do_statement ::=
  KEYWORD_DO actions

location_statement ::=
   entry_location
 | line_location
 | read_location
 | write_location
 | invoke_location
 | synchronize_location
 | throw_location
 | exit_location

entry_location ::=
  KEYWORD_AT KEYWORD_ENTRY
  { extends="location_statement" }

line_location ::=
  KEYWORD_AT? KEYWORD_LINE INTEGER_LITERAL
  { extends="location_statement" }

read_location ::=
  (KEYWORD_AT|KEYWORD_AFTER) KEYWORD_READ qualified_name location_trigger?
  { extends="location_statement" }

write_location ::=
  (KEYWORD_AT|KEYWORD_AFTER) KEYWORD_WRITE qualified_name location_trigger?
  { extends="location_statement" }

invoke_location ::=
  (KEYWORD_AT|KEYWORD_AFTER) KEYWORD_INVOKE qualified_name LPAREN simple_name* RPAREN location_trigger?
  { extends="location_statement" }

synchronize_location ::=
  (KEYWORD_AT|KEYWORD_AFTER) KEYWORD_SYNCHRONIZE location_trigger?
  { extends="location_statement" }

throw_location ::=
  KEYWORD_AT KEYWORD_THROW simple_name? location_trigger?
  { extends="location_statement" }

exit_location ::=
  KEYWORD_AT KEYWORD_RETURN
  { extends="location_statement" }

location_trigger ::=
  count_trigger | always_trigger

count_trigger ::=
  INTEGER_LITERAL
  { extends="location_trigger"
    implements="net.nicoulaj.idea.byteman.lang.psi.BytemanPsiIntegerLiteralElement"
    mixin="net.nicoulaj.idea.byteman.lang.psi.impl.AbstractBytemanPsiIntegerLiteralImpl" }

always_trigger ::=
  KEYWORD_ALL
  { extends="location_trigger" }

helper_statement ::=
  KEYWORD_HELPER class_name

class_name ::=
  CLASS_REF
  { mixin="net.nicoulaj.idea.byteman.lang.psi.impl.AbstractBytemanClassNameImpl" }

event ::=
  nothing_event | binding_event

nothing_event ::=
  KEYWORD_NOTHING
  { extends="event" }

binding_event ::=
  (binding (COMMA|SEMI))* binding SEMI?
  { extends="event" }

binding ::=
  binding_symbol ASSIGN expression

binding_symbol ::=
  simple_name (COLON type_name)?

type_name ::=
  qualified_name array_dimensions?

array_dimensions ::=
  (LSQUARE RSQUARE)+

condition ::=
  expression

actions ::=
  nothing_actions | expression_actions

nothing_actions ::=
  KEYWORD_NOTHING
  { extends="actions" }

expression_actions ::=
  (expression (SEMI|COMMA))* (expression | throw_return_expression) SEMI?
  { extends="actions" }

throw_return_expression ::=
  throw_expression | return_expression

throw_expression ::=
  KEYWORD_THROW KEYWORD_NEW? qualified_name LPAREN expression_list? RPAREN
  { extends="throw_return_expression" }

expression_list ::=
  (expression (SEMI|COMMA))* expression

return_expression ::=
  KEYWORD_RETURN expression?
  { extends="throw_return_expression" }

expression ::=
  base_expression | binary_expression | ternary_expression

binary_expression ::=
  (base_expression (OR|AND|LT|LE|EQ|NE|GE|GT|URSH|RSH|LSH|BOR|BAND|BXOR|PLUS|MINUS|MUL|DIV|MOD) expression)+
  { extends="expression" }

ternary_expression ::=
  (base_expression TERN_IF expression COLON expression)+
  { extends="expression" }

base_expression ::=
    unary_oper_expression
  | array_expression
  | field_expression
  | meth_expression
  | new_expression
  | simple_expression
  | null_expression
  | simple_name
  | assign_expression

unary_oper_expression ::=
  (NOT|TWIDDLE|MINUS) expression
  { extends="base_expression" }

array_expression ::=
  (simple_expression|simple_name|field_expression|meth_expression) (LSQUARE expression RSQUARE)+
  { extends="base_expression" }

field_expression ::=
    qualified_name DOT simple_name
  | (simple_expression|meth_expression) (DOT simple_name)+
  { extends="base_expression" }

meth_expression ::=
  ( ((qualified_name|simple_expression) DOT)* simple_name LPAREN expression_list? RPAREN )+
  { extends="base_expression" }

new_expression ::=
  KEYWORD_NEW qualified_name ( new_array_idx_list | LPAREN expression_list? RPAREN )
  { extends="base_expression" }

new_array_idx_list ::=
  (LSQUARE expression? RSQUARE)+

assign_expression ::=
  (simple_name|DOLLAR|field_expression|array_expression) ASSIGN expression
  { extends="base_expression" }

simple_expression ::=
    INTEGER_LITERAL
  | FLOAT_LITERAL
  | BOOLEAN_LITERAL
  | STRING_LITERAL
  | DOLLAR
  | LPAREN expression RPAREN
  { extends="base_expression" }

null_expression ::=
  NULL_LITERAL
  { extends="base_expression" }

simple_name ::=
  IDENTIFIER
  { extends="base_expression" }

qualified_name ::=
  (simple_name DOT)* simple_name
