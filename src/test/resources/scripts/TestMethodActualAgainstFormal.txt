FILE
  PsiComment(comment)('##############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JBoss, Home of Professional Open Source')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Copyright 2009, Red Hat and individual contributors')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# by the @authors tag. See the copyright.txt in the distribution for a')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# full listing of individual contributors.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This is free software; you can redistribute it and/or modify it')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# under the terms of the GNU Lesser General Public License as')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# published by the Free Software Foundation; either version 2.1 of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the License, or (at your option) any later version.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This software is distributed in the hope that it will be useful,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# but WITHOUT ANY WARRANTY; without even the implied warranty of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Lesser General Public License for more details.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# You should have received a copy of the GNU Lesser General Public')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# License along with this software; if not, write to the Free')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 02110-1301 USA, or see the FSF site: http://www.fsf.org.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# @authors Andrew Dinn')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Test for BYTEMAN-153 reported by Jeremy Whiting where a method call with more than')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# one potential candidate implementation was not being resolved when the argument type')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# was a subtype of the formal parameter type. e.g. a call to built-in')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# traceStack("got it", "myTraceStream") is matched by name and arity against')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# both traceStack(String, int) and traceStack(String, Object). Further type')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# checking should idenitfy that both are valid as regards the first parameter type')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# but only the second is valdi as regards the second parameter type. However, the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# pruning algorithm was rejecting both the first and secodn calls because neither')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# formal type is equal to the actual type String. The pruning test should allow')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# any formal type which is equal to or a super of the actual type.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('test method actual against formal')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('TestMethodActualAgainstFormal')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('checkMethod')
    PsiWhiteSpace('\n')
    HELPER_STATEMENT
      PsiElement(KEYWORD_HELPER)('HELPER')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('org.jboss.byteman.tests.helpers.Default')
    PsiWhiteSpace('\n')
    ENTRY_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_ENTRY)('ENTRY')
    PsiWhiteSpace('\n')
    BIND_STATEMENT
      PsiElement(KEYWORD_BIND)('BIND')
      PsiWhiteSpace(' ')
      BINDING_EVENT
        BINDING
          BINDING_SYMBOL
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('test')
            PsiWhiteSpace(' ')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TYPE_NAME
              PATH
                IDENTIFIER_EXPR
                  PsiElement(IDENTIFIER)('TestMethodActualAgainstFormal')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          EXPR
            SIMPLE_EXPR
              PsiElement(DOLLAR)('$0')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('traceOpen')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'stream'
      PsiElement(string)('stream')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('"')
      PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(string)('"')
      PsiElement(string)('/dev/null')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('traceStack')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('header')
      PsiElement(string)('"')
      PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(string)('"')
      PsiElement(string)('stream')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('test')
      PsiElement(.)('.')
    PsiElement(IDENTIFIER)('log')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiElement(string)('AT ENTRY trace for checkMethod()')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')