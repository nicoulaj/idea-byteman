Byteman:COMMENT;"########################################################################\n# JBoss, Home of Professional Open Source\n# Copyright 20109, Red Hat and individual contributors\n# by the @authors tag. See the copyright.txt in the distribution for a\n# full listing of individual contributors.\n#\n# This is free software; you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as\n# published by the Free Software Foundation; either version 2.1 of\n# the License, or (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this software; if not, write to the Free\n# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n# 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n#\n# @authors Andrew Dinn\n#\n# Transaction Statistics Display via a Dynamic MBean\n#\n# A variant of the JVMMBeanStats script which counts requests made via\n# interface javax.transaction.Transaction and makes the stats available\n# via a JMX Dynamic MBean. Note that this is only counting calls to the\n# transaction interface methods. Counting the number of successful\n# begins, commits, rollbacks etc woudl require injecting rules into\n# the implementation classes at strategic locations where success or\n# failure of a transaction can be confirmed.\n#\n# to use ths script to trace execution of JBossTS\n#\n#  -- set the directory in which byteman has been installed\n#  BYTEMAN_HOME= ...\n#\n#   -- identify the samples helper jar\n#   SAMPLE_JAR=${BYTEMAN_HOME}/sample/lib/byteman-sample.jar\n#\n#   -- identify this script\n#   SCRIPT={BYTEMAN_HOME}/sample/scripts/TXMBeanStats.txt\n#\n#   -- set the javaagent command line option and start JBoss AS\n#   export JAVA_OPTS="${JAVA_OPTS} -javaagent:${BYTEMAN_JAR}=script:${SCRIPT},sys:${SAMPLE_JAR)"\n#   ${JBOSS_HOME}/bin/run.sh\n#\n# alternatively to load the script dynamically\n#\n#   -- start JBoss AS with the Byteman agent listener\n#   export JAVA_OPTS="${JAVA_OPTS} -javaagent:${BYTEMAN_JAR}=listener:true"\n#  ${JBOSS_HOME}/run.sh\n#\n#   -- install the helper library into the system classpath\n#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -s $SAMPLE_JAR\n#\n#   -- install the script\n#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -l $SCRIPT\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"########################################################################\n#\n# All rules in this script use class JMXHelper which provides support\n# for sampling and displaying statistics in an MBean. The helper adds a\n# thread in the background when it is activated i.e. when any of the rules\n# which employs the helper is first triggered. The thread is shut down\n# when the helper is deactivated i.e. once all rules using the helper\n# have been uninstalled. At regular intervals the helper thread samples\n# counters updated by the rules and posts new stats to the MBean.\n# The helper will, by default, install its MBeans in the platform\n# MBeanServer. You can override this behavior by setting the JVM\n# system property "org.jboss.byteman.jmx.mbeanserver" to a valid\n# JMX domain name. If an MBeanServer exists with that as its default\n# domain, it will be used, otherwise, an MBeanServer will be created\n# with that domain name as its default. If the system property is\n# set to "*platform*", then the platform MBeanServer will be used.\n#\n# The script attaches a rule to the helper method keyInfo() to define the\n# counters to be sampled by the background thread. The object returned\n# by this rule contains a set of string keys identifying the counters.\n# It also provides each counter with a corresponding desciption\n# and counter type. The type is either: CUMULATIVE meaning that the\n# display tracks the counter total across successive samples; RATE,\n# meaning that the display tracks the rate of change in the counter\n# value per second across the last N samples; or MEAN, meaning\n# that the display tracks the mean value of the counter across\n# the last N samples. n.b. in the last case the sample counts\n# are weighted by the exact length of the sample interval.\n#\n# The script also attaches a rule to helper method samplePeriod. The value\n# 5000 returned by this method is used as the sampling period measured in\n#  milliseconds. If this rule were omitted then the method would returns\n# the default value 10,000.\n#\n# Thirdly, the script attaches a rule to helper method sampleSetSize. The value\n# 3 returned by this method is used to determine how many sample readings to\n# combine when computing the rate of change of a counter or the average value\n# of the counter across each sample period.\n#\n# The remaining rules are used to update the values of the counters displayed\n# in the mbean. They are injected into JBossTS methods at locations where\n# a statistically significant event occurs and their action, fired when\n# that event needs to be counted, is to incremment the relevant counter.\n#\n# In this example the rules measure various operations in the JVM such as\n# thread, file and class loads operations.\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# ensure all rules employ the JMX helper class.\n"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"HELPER"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"org"
Byteman:DOT;"."
Byteman:IDENTIFIER;"jboss"
Byteman:DOT;"."
Byteman:IDENTIFIER;"byteman"
Byteman:DOT;"."
Byteman:IDENTIFIER;"sample"
Byteman:DOT;"."
Byteman:IDENTIFIER;"helper"
Byteman:DOT;"."
Byteman:IDENTIFIER;"JMXHelper"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when the periodic helper thread starts\n# it returns a KeyInfo object identifying the stats counters\n# updated by rules in this rule set\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"return"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"key"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"info"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"JMXHelper"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:BIND_KEYWORD;"BIND"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
WHITE_SPACE;" "
Byteman:COLON;":"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
WHITE_SPACE;" "
Byteman:ASSIGN;"="
WHITE_SPACE;" "
Byteman:NEW_KEYWORD;"new"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""JBossTS Statistics in a Dynamic MBean""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX begin""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX begin total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX commit""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX commit total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX rollback""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX rollback total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX rollback""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX rollback total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX setRollbackOnly""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX setRollbackOnly total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX enlistResource""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX enlistResource total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX delistResource""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX delistResource total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX registerSynchronization""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX registerSynchronization total""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX begin""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX begin request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX commit""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX commit request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX rollback""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX rollback request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX rollback""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX rollback request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX setRollbackOnly""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX setRollbackOnly request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX enlistResource""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX enlistResource request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX delistResource""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX delistResource request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX registerSynchronization""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX registerSynchronization request/second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX begin""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX begin average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX commit""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX commit average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX rollback""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX rollback average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX rollback""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX rollback average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX setRollbackOnly""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX setRollbackOnly average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX enlistResource""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX enlistResource average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX delistResource""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX delistResource average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX registerSynchronization""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""TX registerSynchronization average""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts\n# it returns a boolean which determines whether the helper thread\n# creates a JMX Connector Server, allowing the MBean stats to be\n# fetched by a remote client using RMI. The default implemenation of\n# the trigger method returns false. If you want to be able to fetch\n# the MBean stats form a remote client uncomment this rule so  that\n# it injects code returning true.\n# RULE configure rmi server\n# CLASS JMXHelper\n# METHOD rmiServerRequired()\n# IF TRUE\n# DO RETURN TRUE\n# ENDRULE\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts\n# but only if the previous rule has requested that an rmi server\n# be installed. it returns a host address used when creating the\n# server socket. the trigger method returns "localhost" as the\n# default host. if you want to use a  different host then uncommment\n# this rule and insert a suitable address\n# RULE configure rmi host\n# CLASS JMXHelper\n# METHOD rmiHost()\n# IF TRUE\n# DO RETURN "<replace me with a hostname or address>"\n# ENDRULE\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts\n# but only if the previous rule has requested that an rmi server\n# be installed. it returns a port used when creating the\n# server socket. the trigger method returns 9999 as the\n# default host. if you want to use a  different host then uncommment\n# this rule and edit the port number\n# RULE configure rmi host\n# CLASS JMXHelper\n# METHOD rmiHost()\n# IF TRUE\n# DO RETURN <replace me with a port number>\n# ENDRULE\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# this rule is triggered when a call is made to Transaction.begin\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"begin"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"request"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"INTERFACE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"javax"
Byteman:DOT;"."
Byteman:IDENTIFIER;"transaction"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Transaction"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"begin"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX begin request""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when a call is made to Transaction.commit\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"commit"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"request"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"INTERFACE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"javax"
Byteman:DOT;"."
Byteman:IDENTIFIER;"transaction"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Transaction"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"commit"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX commit request""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when a call is made to Transaction.rollback\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"rollback"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"request"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"INTERFACE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"javax"
Byteman:DOT;"."
Byteman:IDENTIFIER;"transaction"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Transaction"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"rollback"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX rollback request""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when a call is made to Transaction.setRollbackOnly\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"setRollbackOnly"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"request"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"INTERFACE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"javax"
Byteman:DOT;"."
Byteman:IDENTIFIER;"transaction"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Transaction"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"setRollbackOnly"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX setRollbackOnly request""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when a call is made to Transaction.enlistResource\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"enlistResource"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"request"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"INTERFACE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"javax"
Byteman:DOT;"."
Byteman:IDENTIFIER;"transaction"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Transaction"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"enlistResource"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX enlistResource request""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when a call is made to Transaction.delistResource\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"delistResource"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"request"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"INTERFACE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"javax"
Byteman:DOT;"."
Byteman:IDENTIFIER;"transaction"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Transaction"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"delistResource"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX delistResource request""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when a call is made to Transaction.registerSynchronization\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"registerSynchronization"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"request"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"INTERFACE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"javax"
Byteman:DOT;"."
Byteman:IDENTIFIER;"transaction"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Transaction"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"registerSynchronization"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""TX registerSynchronization request""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n"
