FILE
  PsiComment(comment)('########################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JBoss, Home of Professional Open Source')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Copyright 2010, Red Hat and individual contributors')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# by the @authors tag. See the copyright.txt in the distribution for a')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# full listing of individual contributors.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This is free software; you can redistribute it and/or modify it')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# under the terms of the GNU Lesser General Public License as')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# published by the Free Software Foundation; either version 2.1 of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the License, or (at your option) any later version.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This software is distributed in the hope that it will be useful,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# but WITHOUT ANY WARRANTY; without even the implied warranty of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Lesser General Public License for more details.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# You should have received a copy of the GNU Lesser General Public')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# License along with this software; if not, write to the Free')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 02110-1301 USA, or see the FSF site: http://www.fsf.org.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# @authors Andrew Dinn')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JVM Statistics Display via a Dynamic MBean')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# A variant of the PeriodicStats script which counts the occurence of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# various events in the JVM and makes the stats available via a JMX')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Dynamic MBean')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# to use ths script to trace execution of java program org.my.App execute')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  -- set the directory in which byteman has been installed')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  BYTEMAN_HOME= ...')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- identify the samples helper jar')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   SAMPLE_JAR=${BYTEMAN_HOME}/sample/lib/byteman-sample.jar')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- identify this script')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   SCRIPT={BYTEMAN_HOME}/sample/scripts/JVMMBeanStats.txt')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmjava.sh -l $SCRIPT -b $SAMPLE_JAR org.my.App')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# alternatively to load the script dynamically')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- start the program with the agent')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmjava.sh org.my.App')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- install the helper library into the bootstrap classpath')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -b $SAMPLE_JAR')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- install the script')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -l $SCRIPT')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('########################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# All rules in this script use class JMXHelper which provides support')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# for sampling and displaying statistics in an MBean. The helper adds a')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# thread in the background when it is activated i.e. when any of the rules')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# which employs the helper is first triggered. The thread is shut down')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# when the helper is deactivated i.e. once all rules using the helper')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# have been uninstalled. At regular intervals the helper thread samples')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# counters updated by the rules and posts new stats to the MBean.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The helper will, by default, install its MBeans in the platform')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# MBeanServer. You can override this behavior by setting the JVM')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# system property "org.jboss.byteman.jmx.mbeanserver" to a valid')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JMX domain name. If an MBeanServer exists with that as its default')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# domain, it will be used, otherwise, an MBeanServer will be created')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# with that domain name as its default. If the system property is')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# set to "*platform*", then the platform MBeanServer will be used.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The script attaches a rule to the helper method keyInfo() to define the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# counters to be sampled by the background thread. The object returned')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# by this rule contains a set of string keys identifying the counters.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# It also provides each counter with a corresponding desciption')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# and counter type. The type is either: CUMULATIVE meaning that the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# display tracks the counter total across successive samples; RATE,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# meaning that the display tracks the rate of change in the counter')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# value per second across the last N samples; or MEAN, meaning')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# that the display tracks the mean value of the counter across')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the last N samples. n.b. in the last case the sample counts')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# are weighted by the exact length of the sample interval.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The script also attaches a rule to helper method samplePeriod. The value')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 5000 returned by this method is used as the sampling period measured in')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  milliseconds. If this rule were omitted then the method would returns')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the default value 10,000.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Thirdly, the script attaches a rule to helper method sampleSetSize. The value')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 3 returned by this method is used to determine how many sample readings to')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# combine when computing the rate of change of a counter or the average value')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# of the counter across each sample period.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The remaining rules are used to update the values of the counters displayed')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# in the mbean. They are injected into methods at locations where')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# a statistically significant event occurs and their action, fired when')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# that event needs to be counted, is to incremment the relevant counter.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# In this example the rules measure various operations in the JVM such as')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# thread, file and class loads operations.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# ensure all rules employ the JMX helper class.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiElement(DUMMY_BLOCK)
    HELPER_STATEMENT
      PsiElement(KEYWORD_HELPER)('HELPER')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('org.jboss.byteman.sample.helper.JMXHelper')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule is triggered when the periodic helper thread starts')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# it returns a KeyInfo object identifying the stats counters')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# updated by rules in this rule set')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('return key info')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      PsiElement(class reference)('JMXHelper')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('keyInfo()')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_BIND)('BIND')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('keyInfo')
      PsiWhiteSpace(' ')
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('KeyInfo')
      PsiWhiteSpace(' ')
      PsiElement(ASSIGN)('=')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_NEW)('new')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('KeyInfo')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'JVM Statistics in a Dynamic MBean'
        PsiElement(string)('JVM Statistics in a Dynamic MBean')
      PsiElement(DUMMY_BLOCK)
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiWhiteSpace('\n')
          PsiElement(IF)('IF')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('TRUE')
          PsiWhiteSpace('\n')
          PsiElement(KEYWORD_DO)('DO')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('thread creates')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('Thread() total calls')
          PsiElement(string)('"')
        PsiElement(DUMMY_BLOCK)
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('thread starts')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(DUMMY_BLOCK)
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('Thread.start() total calls')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(DUMMY_BLOCK)
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('thread runs')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(DUMMY_BLOCK)
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('Thread.run() total calls')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('"')
          PsiElement(string)('thread exits')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('Thread.exit() total calls')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('thread creates')
          PsiElement(string)('"')
        PsiElement(DUMMY_BLOCK)
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('Thread() calls per second')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(DUMMY_BLOCK)
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('thread starts')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
      PsiElement(DUMMY_BLOCK)
        PsiElement(DUMMY_BLOCK)
          PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('Thread.start() calls per second')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
        PsiElement(DUMMY_BLOCK)
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('thread runs')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('Thread.run() calls per second')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('thread exits')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('Thread.exit() calls per second')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
        PsiElement(DUMMY_BLOCK)
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('file in opens')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(DUMMY_BLOCK)
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('FileInputStream.open() calls per second')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
        PsiElement(DUMMY_BLOCK)
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('file out opens')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
          PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('"')
          PsiElement(string)('FileOutputStream.open() calls per second')
          PsiElement(string)('"')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('file in closes')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('KeyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(string)('"')
          PsiElement(string)('FileInputStream.close() calls per second')
          PsiElement(string)('"')
        PsiElement(DUMMY_BLOCK)
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('keyInfo')
          PsiElement(.)('.')
          PsiElement(IDENTIFIER)('addKey')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('file out closes')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('FileOutputStream.close() calls per second')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
      PsiElement(DUMMY_BLOCK)
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('class loads')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
      PsiElement(DUMMY_BLOCK)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('ClassLoader.defineClass() total calls')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(string)('class loads')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('ClassLoader.defineClass() mean calls per sample')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('keyInfo')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule is triggered when the periodic helper thread starts')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# it returns a sample period in milliseconds for which the')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# periodic helper thread sits and waits before sampling each')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# of the counters anf updating the MBean')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('set period')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('JMXHelper')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('samplePeriod()')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          RETURN_EXPR
            PsiElement(KEYWORD_RETURN)('RETURN')
            PsiWhiteSpace(' ')
            EXPR
              SIMPLE_EXPR
                PsiElement(INTEGER_LITERAL)('5000')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule is triggered when the periodic helper thread starts')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# it returns a count for the number of samples which will be')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# combined when computing counter rates or counter sample period')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# means')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('set sample set size')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('JMXHelper')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('sampleSetSize()')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          RETURN_EXPR
            PsiElement(KEYWORD_RETURN)('RETURN')
            PsiWhiteSpace(' ')
            EXPR
              SIMPLE_EXPR
                PsiElement(INTEGER_LITERAL)('3')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# This rule is triggered when the periodic helper thread starts')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# it returns a boolean which determines whether the helper thread')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# creates a JMX Connector Server, allowing the MBean stats to be')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# fetched by a remote client using RMI. The default implemenation of')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# the trigger method returns false. If you want to be able to fetch')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# the MBean stats form a remote client uncomment this rule so  that')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# it injects code returning true.')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# RULE configure rmi server')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# CLASS JMXHelper')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# METHOD rmiServerRequired()')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# IF TRUE')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# DO RETURN TRUE')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# This rule is triggered when the periodic helper thread starts')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# but only if the previous rule has requested that an rmi server')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# be installed. it returns a host address used when creating the')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# server socket. the trigger method returns "localhost" as the')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# default host. if you want to use a  different host then uncommment')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule and insert a suitable address')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# RULE configure rmi host')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# CLASS JMXHelper')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# METHOD rmiHost()')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# IF TRUE')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# DO RETURN "<replace me with a hostname or address>"')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# This rule is triggered when the periodic helper thread starts')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# but only if the previous rule has requested that an rmi server')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# be installed. it returns a port used when creating the')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# server socket. the trigger method returns 9999 as the')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# default host. if you want to use a  different host then uncommment')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule and edit the port number')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# RULE configure rmi host')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# CLASS JMXHelper')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# METHOD rmiHost()')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# IF TRUE')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# DO RETURN <replace me with a port number>')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# The remaining rules increment stats counters whenever a sigificant')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# event occurs in the JVM.')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread creates')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread create')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('java.lang.Thread')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('<init>')
      PsiWhiteSpace('\n')
      EXIT_LOCATION
        PsiElement(KEYWORD_AT)('AT')
        PsiWhiteSpace(' ')
        PsiElement(KEYWORD_RETURN)('EXIT')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('debug')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'create thread '
        PsiElement(string)('create thread ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(DOLLAR)('$0')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('getName')
        PsiElement(LPAREN)('(')
        PsiElement(RPAREN)(')')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('thread creates')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread starts')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread start')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      PsiElement(class reference)('java.lang.Thread')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('start()')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(INVOKE)('CALL')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('start0')
      PsiWhiteSpace('\n')
      PsiErrorElement:'.' or LPAREN expected, got 'IF'
        PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(boolean)('TRUE')
        PsiWhiteSpace('\n')
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('debug')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('start thread ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(DOLLAR)('$0')
        PsiElement(.)('.')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('getName')
        PsiElement(LPAREN)('(')
        PsiElement(RPAREN)(')')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('incrementCounter')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('thread starts')
        PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread runs')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread run')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      PsiElement(class reference)('^java.lang.Thread')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('run()')
      PsiWhiteSpace('\n')
      PsiComment(comment)('# only count run when called from JVM i.e. when there is no caller frame')
      PsiWhiteSpace('\n')
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      PsiElement(!)('!')
      PsiElement(IDENTIFIER)('callerMatches')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got '.*'
        PsiElement(string)('.*')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiWhiteSpace('\n')
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('debug')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('run thread ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(DOLLAR)('$0')
      PsiElement(DUMMY_BLOCK)
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('getName')
        PsiElement(LPAREN)('(')
        PsiElement(RPAREN)(')')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('incrementCounter')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('thread runs')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread exits')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread exit')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('^java.lang.Thread')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('exit()')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('debug')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'exit thread '
        PsiElement(string)('exit thread ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(DOLLAR)('$0')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('getName')
        PsiElement(LPAREN)('(')
        PsiElement(RPAREN)(')')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('thread exits')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts FileInputStream opens for read from a File')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count file open read File')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('java.io.FileInputStream')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('<init>(java.io.File)')
      PsiWhiteSpace('\n')
      PsiComment(comment)('# only count successful opens i.e. ones where we reach return')
      PsiWhiteSpace('\n')
      EXIT_LOCATION
        PsiElement(KEYWORD_AT)('AT')
        PsiWhiteSpace(' ')
        PsiElement(KEYWORD_RETURN)('RETURN')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('debug')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'open input file '
        PsiElement(string)('open input file ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(DOLLAR)('$1')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('getName')
        PsiElement(LPAREN)('(')
        PsiElement(RPAREN)(')')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(DOLLAR)('$0')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('fd')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('incrementCounter')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
      PsiElement(string)('file in opens')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts FileInputStream opens for read from a File Descriptor')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count file open read File Descriptor')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('java.io.FileInputStream')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('<init>(FileDescriptor)')
      PsiWhiteSpace('\n')
      PsiComment(comment)('# only count successful opens i.e. ones where we reach return')
      PsiWhiteSpace('\n')
      EXIT_LOCATION
        PsiElement(KEYWORD_AT)('AT')
        PsiWhiteSpace(' ')
        PsiElement(KEYWORD_RETURN)('RETURN')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('debug')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'open input file 2 '
        PsiElement(string)('open input file 2 ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(DOLLAR)('$1')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('incrementCounter')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('file in opens')
        PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts FileOutputStream opens for write from a File')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count file open write File')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('java.io.FileOutputStream')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('<init>(java.io.File, boolean)')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# only count successful opens i.e. ones where we reach return')
    PsiWhiteSpace('\n')
    EXIT_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('debug')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'open output file '
      PsiElement(string)('open output file ')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('"')
      PsiWhiteSpace(' ')
      PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$1')
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('getName')
      PsiElement(LPAREN)('(')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace(' ')
      PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(string)('"')
      PsiElement(string)(' ')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('"')
      PsiWhiteSpace(' ')
      PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$0')
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('fd')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
    PsiElement(string)('file out opens')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts FileOutputStream opens for write from a File Descriptor')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count file open write File Descriptor')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('java.io.FileOutputStream')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('<init>(FileDescriptor)')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# only count successful opens i.e. ones where we reach return')
    PsiWhiteSpace('\n')
    EXIT_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('debug')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'open output file 2 '
      PsiElement(string)('open output file 2 ')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('"')
      PsiWhiteSpace(' ')
      PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$1')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('file out opens')
      PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts FileInputStream closes for a File input stream')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count file input stream close')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_CLASS)('CLASS')
    PsiWhiteSpace(' ')
    PsiElement(class reference)('^java.io.FileInputStream')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_METHOD)('METHOD')
    PsiWhiteSpace(' ')
    PsiElement(method reference)('close()')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_AT)('AT')
    PsiWhiteSpace(' ')
    PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_BIND)('BIND')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('nullfd')
    PsiWhiteSpace(' ')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('java')
    PsiElement(.)('.')
    PsiElement(IDENTIFIER)('io')
    PsiElement(.)('.')
    PsiElement(IDENTIFIER)('FileDescriptor')
    PsiWhiteSpace(' ')
    PsiElement(ASSIGN)('=')
    PsiWhiteSpace(' ')
    PsiElement(null)('null')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# don't count if this is a call to super or if the file has already been closed')
    PsiWhiteSpace('\n')
    PsiElement(IF)('IF')
    PsiWhiteSpace(' ')
    PsiElement(!)('!')
    PsiElement(IDENTIFIER)('callerMatches')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got '.*'
      PsiElement(string)('.*')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('\')
      PsiElement(string)('.close')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace(' ')
      PsiElement(&&)('&&')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$0')
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('fd')
      PsiWhiteSpace(' ')
      PsiElement(NE)('!=')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('nullfd')
    PsiWhiteSpace('\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('debug')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('close input file ')
      PsiElement(string)('"')
      PsiWhiteSpace(' ')
      PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$0')
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('fd')
    PsiElement(DUMMY_BLOCK)
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('fd')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('file in closes')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts FileOutputStream closes for a File output stream')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count file output stream close')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_CLASS)('CLASS')
    PsiWhiteSpace(' ')
    PsiElement(class reference)('^java.io.FileOutputStream')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_METHOD)('METHOD')
    PsiWhiteSpace(' ')
    PsiElement(method reference)('close()')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_AT)('AT')
    PsiWhiteSpace(' ')
    PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_BIND)('BIND')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('nullfd')
    PsiWhiteSpace(' ')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('java')
    PsiElement(.)('.')
    PsiElement(IDENTIFIER)('io')
    PsiElement(.)('.')
    PsiElement(IDENTIFIER)('FileDescriptor')
    PsiWhiteSpace(' ')
    PsiElement(ASSIGN)('=')
    PsiWhiteSpace(' ')
    PsiElement(null)('null')
    PsiWhiteSpace('\n')
    PsiWhiteSpace(' ')
    PsiComment(comment)('# don't count if this is a call to super or if the file has already been closed')
    PsiWhiteSpace('\n')
    PsiElement(IF)('IF')
    PsiWhiteSpace(' ')
    PsiElement(!)('!')
    PsiElement(IDENTIFIER)('callerMatches')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got '.*'
      PsiElement(string)('.*')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('\')
      PsiElement(string)('.close')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(&&)('&&')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$0')
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('fd')
      PsiWhiteSpace(' ')
      PsiElement(NE)('!=')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('nullfd')
    PsiWhiteSpace('\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('debug')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('close output file ')
      PsiElement(string)('"')
      PsiWhiteSpace(' ')
      PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$0')
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('fd')
    PsiElement(DUMMY_BLOCK)
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('fd')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('file out closes')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts class loads which result in a new class being defined')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count class loads')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('^java.lang.ClassLoader')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('defineClass(String, byte[], int, int, ProtectionDomain)')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# only count successful loads')
    PsiWhiteSpace('\n')
    EXIT_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('debug')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'define class '
      PsiElement(string)('define class ')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('"')
      PsiWhiteSpace(' ')
      PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(DOLLAR)('$1')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('class loads')
      PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')