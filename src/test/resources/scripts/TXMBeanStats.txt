FILE
  PsiComment(comment)('########################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JBoss, Home of Professional Open Source')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Copyright 20109, Red Hat and individual contributors')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# by the @authors tag. See the copyright.txt in the distribution for a')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# full listing of individual contributors.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This is free software; you can redistribute it and/or modify it')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# under the terms of the GNU Lesser General Public License as')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# published by the Free Software Foundation; either version 2.1 of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the License, or (at your option) any later version.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This software is distributed in the hope that it will be useful,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# but WITHOUT ANY WARRANTY; without even the implied warranty of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Lesser General Public License for more details.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# You should have received a copy of the GNU Lesser General Public')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# License along with this software; if not, write to the Free')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 02110-1301 USA, or see the FSF site: http://www.fsf.org.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# @authors Andrew Dinn')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Transaction Statistics Display via a Dynamic MBean')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# A variant of the JVMMBeanStats script which counts requests made via')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# interface javax.transaction.Transaction and makes the stats available')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# via a JMX Dynamic MBean. Note that this is only counting calls to the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# transaction interface methods. Counting the number of successful')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# begins, commits, rollbacks etc woudl require injecting rules into')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the implementation classes at strategic locations where success or')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# failure of a transaction can be confirmed.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# to use ths script to trace execution of JBossTS')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  -- set the directory in which byteman has been installed')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  BYTEMAN_HOME= ...')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- identify the samples helper jar')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   SAMPLE_JAR=${BYTEMAN_HOME}/sample/lib/byteman-sample.jar')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- identify this script')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   SCRIPT={BYTEMAN_HOME}/sample/scripts/TXMBeanStats.txt')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- set the javaagent command line option and start JBoss AS')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   export JAVA_OPTS="${JAVA_OPTS} -javaagent:${BYTEMAN_JAR}=script:${SCRIPT},sys:${SAMPLE_JAR)"')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   ${JBOSS_HOME}/bin/run.sh')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# alternatively to load the script dynamically')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- start JBoss AS with the Byteman agent listener')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   export JAVA_OPTS="${JAVA_OPTS} -javaagent:${BYTEMAN_JAR}=listener:true"')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${JBOSS_HOME}/run.sh')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- install the helper library into the system classpath')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -s $SAMPLE_JAR')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- install the script')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -l $SCRIPT')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('########################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# All rules in this script use class JMXHelper which provides support')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# for sampling and displaying statistics in an MBean. The helper adds a')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# thread in the background when it is activated i.e. when any of the rules')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# which employs the helper is first triggered. The thread is shut down')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# when the helper is deactivated i.e. once all rules using the helper')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# have been uninstalled. At regular intervals the helper thread samples')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# counters updated by the rules and posts new stats to the MBean.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The helper will, by default, install its MBeans in the platform')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# MBeanServer. You can override this behavior by setting the JVM')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# system property "org.jboss.byteman.jmx.mbeanserver" to a valid')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JMX domain name. If an MBeanServer exists with that as its default')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# domain, it will be used, otherwise, an MBeanServer will be created')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# with that domain name as its default. If the system property is')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# set to "*platform*", then the platform MBeanServer will be used.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The script attaches a rule to the helper method keyInfo() to define the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# counters to be sampled by the background thread. The object returned')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# by this rule contains a set of string keys identifying the counters.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# It also provides each counter with a corresponding desciption')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# and counter type. The type is either: CUMULATIVE meaning that the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# display tracks the counter total across successive samples; RATE,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# meaning that the display tracks the rate of change in the counter')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# value per second across the last N samples; or MEAN, meaning')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# that the display tracks the mean value of the counter across')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the last N samples. n.b. in the last case the sample counts')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# are weighted by the exact length of the sample interval.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The script also attaches a rule to helper method samplePeriod. The value')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 5000 returned by this method is used as the sampling period measured in')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  milliseconds. If this rule were omitted then the method would returns')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the default value 10,000.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Thirdly, the script attaches a rule to helper method sampleSetSize. The value')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 3 returned by this method is used to determine how many sample readings to')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# combine when computing the rate of change of a counter or the average value')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# of the counter across each sample period.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# The remaining rules are used to update the values of the counters displayed')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# in the mbean. They are injected into JBossTS methods at locations where')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# a statistically significant event occurs and their action, fired when')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# that event needs to be counted, is to incremment the relevant counter.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# In this example the rules measure various operations in the JVM such as')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# thread, file and class loads operations.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# ensure all rules employ the JMX helper class.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  HELPER_STATEMENT
    PsiElement(KEYWORD_HELPER)('HELPER')
    PsiWhiteSpace(' ')
    CLASS_NAME
      PsiElement(class reference)('org.jboss.byteman.sample.helper.JMXHelper')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when the periodic helper thread starts')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# it returns a KeyInfo object identifying the stats counters')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# updated by rules in this rule set')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('return key info')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_CLASS)('CLASS')
    PsiWhiteSpace(' ')
    PsiElement(class reference)('JMXHelper')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_METHOD)('METHOD')
    PsiWhiteSpace(' ')
    PsiElement(method reference)('keyInfo()')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_BIND)('BIND')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('keyInfo')
    PsiWhiteSpace(' ')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('KeyInfo')
    PsiWhiteSpace(' ')
    PsiElement(ASSIGN)('=')
    PsiWhiteSpace(' ')
    PsiElement(KEYWORD_NEW)('new')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('KeyInfo')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'JBossTS Statistics in a Dynamic MBean'
      PsiElement(string)('JBossTS Statistics in a Dynamic MBean')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiWhiteSpace('\n')
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        PsiElement(boolean)('TRUE')
        PsiWhiteSpace('\n')
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('TX begin')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX begin total')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX commit')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX commit total')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
      PsiElement(DUMMY_BLOCK)
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
      PsiElement(DUMMY_BLOCK)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback total')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(string)('TX rollback')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback total')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX setRollbackOnly')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX setRollbackOnly total')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX enlistResource')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX enlistResource total')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
      PsiElement(DUMMY_BLOCK)
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX delistResource')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('TX delistResource total')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX registerSynchronization')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_CUMULATIVE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX registerSynchronization total')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX begin')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
      PsiElement(DUMMY_BLOCK)
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX begin request/second')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX commit')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(string)('TX commit request/second')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('TX rollback')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback request/second')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
    PsiWhiteSpace(' ')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback request/second')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
      PsiElement(DUMMY_BLOCK)
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX setRollbackOnly')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
      PsiElement(DUMMY_BLOCK)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX setRollbackOnly request/second')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(string)('TX enlistResource')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX enlistResource request/second')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX delistResource')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX delistResource request/second')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX registerSynchronization')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('KEY_TYPE_RATE')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX registerSynchronization request/second')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
      PsiElement(DUMMY_BLOCK)
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX begin')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('TX begin average')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX commit')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX commit average')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
      PsiElement(DUMMY_BLOCK)
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback average')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX rollback')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
        PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(string)('TX rollback average')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('TX setRollbackOnly')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX setRollbackOnly average')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX enlistResource')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX enlistResource average')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
      PsiElement(DUMMY_BLOCK)
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('TX delistResource')
        PsiElement(string)('"')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('KeyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
      PsiElement(DUMMY_BLOCK)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(string)('"')
        PsiElement(string)('TX delistResource average')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('keyInfo')
        PsiElement(.)('.')
        PsiElement(IDENTIFIER)('addKey')
        PsiElement(LPAREN)('(')
    PsiElement(DUMMY_BLOCK)
      PsiElement(string)('"')
      PsiElement(string)('TX registerSynchronization')
      PsiElement(string)('"')
      PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('KeyInfo')
      PsiElement(.)('.')
      PsiElement(IDENTIFIER)('KEY_TYPE_MEAN')
      PsiElement(COMMA)(',')
      PsiWhiteSpace(' ')
      PsiElement(string)('"')
      PsiElement(string)('TX registerSynchronization average')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    PsiWhiteSpace(' ')
    PsiWhiteSpace(' ')
    PsiWhiteSpace(' ')
    PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('keyInfo')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This rule is triggered when the periodic helper thread starts')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# it returns a boolean which determines whether the helper thread')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# creates a JMX Connector Server, allowing the MBean stats to be')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# fetched by a remote client using RMI. The default implemenation of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the trigger method returns false. If you want to be able to fetch')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the MBean stats form a remote client uncomment this rule so  that')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# it injects code returning true.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# RULE configure rmi server')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# CLASS JMXHelper')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# METHOD rmiServerRequired()')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# IF TRUE')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# DO RETURN TRUE')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This rule is triggered when the periodic helper thread starts')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# but only if the previous rule has requested that an rmi server')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# be installed. it returns a host address used when creating the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# server socket. the trigger method returns "localhost" as the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# default host. if you want to use a  different host then uncommment')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule and insert a suitable address')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# RULE configure rmi host')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# CLASS JMXHelper')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# METHOD rmiHost()')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# IF TRUE')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# DO RETURN "<replace me with a hostname or address>"')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This rule is triggered when the periodic helper thread starts')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# but only if the previous rule has requested that an rmi server')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# be installed. it returns a port used when creating the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# server socket. the trigger method returns 9999 as the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# default host. if you want to use a  different host then uncommment')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule and edit the port number')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# RULE configure rmi host')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# CLASS JMXHelper')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# METHOD rmiHost()')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# IF TRUE')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# DO RETURN <replace me with a port number>')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when a call is made to Transaction.begin')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count begin request')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('INTERFACE')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('javax.transaction.Transaction')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('begin()')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'TX begin request'
      PsiElement(string)('TX begin request')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when a call is made to Transaction.commit')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count commit request')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('INTERFACE')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('javax.transaction.Transaction')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('commit()')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'TX commit request'
      PsiElement(string)('TX commit request')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when a call is made to Transaction.rollback')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count rollback request')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('INTERFACE')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('javax.transaction.Transaction')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('rollback()')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'TX rollback request'
      PsiElement(string)('TX rollback request')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when a call is made to Transaction.setRollbackOnly')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count setRollbackOnly request')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('INTERFACE')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('javax.transaction.Transaction')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('setRollbackOnly()')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'TX setRollbackOnly request'
      PsiElement(string)('TX setRollbackOnly request')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when a call is made to Transaction.enlistResource')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count enlistResource request')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('INTERFACE')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('javax.transaction.Transaction')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('enlistResource()')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'TX enlistResource request'
      PsiElement(string)('TX enlistResource request')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when a call is made to Transaction.delistResource')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count delistResource request')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('INTERFACE')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('javax.transaction.Transaction')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('delistResource()')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'TX delistResource request'
      PsiElement(string)('TX delistResource request')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule is triggered when a call is made to Transaction.registerSynchronization')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count registerSynchronization request')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('INTERFACE')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('javax.transaction.Transaction')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('registerSynchronization()')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'TX registerSynchronization request'
      PsiElement(string)('TX registerSynchronization request')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')