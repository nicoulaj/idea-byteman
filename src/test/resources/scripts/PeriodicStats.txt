FILE
  PsiComment(comment)('########################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JBoss, Home of Professional Open Source')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Copyright 2010, Red Hat and individual contributors')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# by the @authors tag. See the copyright.txt in the distribution for a')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# full listing of individual contributors.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This is free software; you can redistribute it and/or modify it')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# under the terms of the GNU Lesser General Public License as')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# published by the Free Software Foundation; either version 2.1 of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# the License, or (at your option) any later version.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# This software is distributed in the hope that it will be useful,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# but WITHOUT ANY WARRANTY; without even the implied warranty of')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Lesser General Public License for more details.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# You should have received a copy of the GNU Lesser General Public')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# License along with this software; if not, write to the Free')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# 02110-1301 USA, or see the FSF site: http://www.fsf.org.')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# @authors Andrew Dinn')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# Preiodic Statistics Display')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# A byteman script which collects statistics for actions performed by the')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# JVM runtime and uses the periodic helper to dump and clear them at regular')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# intervals')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# to use ths script to trace execution of java program org.my.App execute')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  -- set the directory in which byteman has been installed')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  BYTEMAN_HOME= ...')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- identify the samples helper jar to the boot path')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   SAMPLE_JAR=${BYTEMAN_HOME}/sample/lib/byteman-sample.jar')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- identify this script')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   SCRIPT={BYTEMAN_HOME}/sample/scripts/PeriodicStats.txt')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmjava.sh -l $SCRIPT -b $SAMPLE_JAR org.my.App')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# alternatively to load the script dynamically')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- start the program with the agent')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmjava.sh org.my.App')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- install the helper library into the bootstrap classpath')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -b $SAMPLE_JAR')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#   -- install the script')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -l $SCRIPT')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('########################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('#')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# all rules in this script use the periodic helper which provides support')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# for triggering of rules at regular intervals. The helper adds a')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# thread in the background when it is activated i.e. when any of the rules')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# which employs the helper is first triggered. The thread is shut down')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# when the helper is deactivated i.e. once all rules using the helper')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# have been uninstalled.')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiElement(DUMMY_BLOCK)
    HELPER_STATEMENT
      PsiElement(KEYWORD_HELPER)('HELPER')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('org.jboss.byteman.sample.helper.PeriodicHelper')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# This rule defines the wait interval between periodic triggers. The periodic')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# helper thread calls getPeriod when it is started. The rule forces getPeriod')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# to return 30,000 causing the thread to wake up at 30 second intervals.')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('set period')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('PeriodicHelper')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('getPeriod()')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          RETURN_EXPR
            PsiElement(KEYWORD_RETURN)('RETURN')
            PsiWhiteSpace(' ')
            EXPR
              SIMPLE_EXPR
                PsiElement(INTEGER_LITERAL)('30')
    PsiErrorElement:'.', ';', KEYWORD_ENDRULE or LSQUARE expected, got '*'
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(*)('*')
    PsiWhiteSpace(' ')
    PsiElement(INTEGER_LITERAL)('1000')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule is triggered every 30 seconds when the periodic helper thread')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# calls method periodicTrigger. It reads and zeroes all the stats counters')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# and the prints a formatted trace of JVM activity in the 30 second interval.')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('dump stats')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      PsiElement(class reference)('PeriodicHelper')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('periodicTrigger()')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_BIND)('BIND')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('threadCreates')
      PsiWhiteSpace(' ')
      PsiElement(ASSIGN)('=')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('readCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'thread creates'
        PsiElement(string)('thread creates')
      PsiElement(DUMMY_BLOCK)
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('threadStarts')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('readCounter')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('thread starts')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('threadRuns')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('readCounter')
          PsiElement(LPAREN)('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(string)('"')
          PsiElement(string)('thread runs')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('threadExits')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('readCounter')
        PsiElement(DUMMY_BLOCK)
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('thread exits')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('fileInOpens')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
        PsiWhiteSpace(' ')
        PsiElement(DUMMY_BLOCK)
          PsiElement(IDENTIFIER)('readCounter')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('file in opens')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('fileOutOpens')
        PsiWhiteSpace(' ')
        PsiElement(DUMMY_BLOCK)
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('readCounter')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('file out opens')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(DUMMY_BLOCK)
          PsiElement(IDENTIFIER)('fileInCloses')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('readCounter')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('file in closes')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
        PsiElement(DUMMY_BLOCK)
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('fileOutCloses')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('readCounter')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('file out closes')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('true')
        PsiElement(DUMMY_BLOCK)
          PsiElement(RPAREN)(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('classLoads')
          PsiWhiteSpace(' ')
          PsiElement(ASSIGN)('=')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('readCounter')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('class loads')
          PsiElement(string)('"')
          PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(DUMMY_BLOCK)
          PsiElement(boolean)('true')
          PsiElement(RPAREN)(')')
          PsiWhiteSpace('\n')
          PsiElement(IF)('IF')
          PsiWhiteSpace(' ')
          PsiElement(boolean)('TRUE')
          PsiWhiteSpace('\n')
          PsiElement(KEYWORD_DO)('DO')
          PsiWhiteSpace(' ')
          PsiElement(IDENTIFIER)('traceln')
          PsiElement(LPAREN)('(')
          PsiElement(string)('"')
          PsiElement(string)('Periodic Statistics')
          PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('Thread creates    ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('threadCreates')
        PsiElement(RPAREN)(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('Thread starts     ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('threadStarts')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('Thread runs       ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('threadRuns')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
      PsiElement(DUMMY_BLOCK)
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('Thread exits      ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('threadExits')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(string)('File [in] opens   ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('fileInOpens')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('File [out] opens  ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('fileOutOpens')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('File [in] closes  ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('fileInCloses')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('File [out] closes ')
        PsiElement(string)('"')
      PsiWhiteSpace(' ')
      PsiElement(DUMMY_BLOCK)
        PsiElement(PLUS)('+')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('fileOutCloses')
        PsiElement(RPAREN)(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('traceln')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('Class loads       ')
        PsiElement(string)('"')
        PsiWhiteSpace(' ')
        PsiElement(PLUS)('+')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('classLoads')
      PsiElement(RPAREN)(')')
      PsiElement(;)(';')
      PsiWhiteSpace('\n')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('traceln')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# The remaining rules increment stats counters whenever a sigificant')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# event occurs in the JVM.')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread creates')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread create')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('java.lang.Thread')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('<init>')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'thread creates'
        PsiElement(string)('thread creates')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread starts')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread start')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      PsiElement(class reference)('java.lang.Thread')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('start()')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(INVOKE)('CALL')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('start0')
      PsiWhiteSpace('\n')
      PsiErrorElement:'.' or LPAREN expected, got 'IF'
        PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiElement(string)('thread starts')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread runs')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread run')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      PsiElement(class reference)('^java.lang.Thread')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('run()')
      PsiWhiteSpace('\n')
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      PsiElement(!)('!')
      PsiElement(IDENTIFIER)('callerMatches')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got '.*'
        PsiElement(string)('.*')
      PsiElement(DUMMY_BLOCK)
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiWhiteSpace('\n')
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('incrementCounter')
        PsiElement(LPAREN)('(')
        PsiElement(string)('"')
        PsiElement(string)('thread runs')
        PsiElement(string)('"')
        PsiElement(RPAREN)(')')
        PsiWhiteSpace('\n')
        PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts Thread exits')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count thread exit')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('^java.lang.Thread')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('exit()')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'thread exits'
        PsiElement(string)('thread exits')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts FileInputStream opens for read from a File')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count file open read File')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('java.io.FileInputStream')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('<init>(java.io.File)')
      PsiWhiteSpace('\n')
      EXIT_LOCATION
        PsiElement(KEYWORD_AT)('AT')
        PsiWhiteSpace(' ')
        PsiElement(KEYWORD_RETURN)('RETURN')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'file in opens'
        PsiElement(string)('file in opens')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts FileInputStream opens for read from a File Descriptor')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count file open read File Descriptor')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('java.io.FileInputStream')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('<init>(FileDescriptor)')
      PsiWhiteSpace('\n')
      EXIT_LOCATION
        PsiElement(KEYWORD_AT)('AT')
        PsiWhiteSpace(' ')
        PsiElement(KEYWORD_RETURN)('RETURN')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'file in opens'
        PsiElement(string)('file in opens')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
    PsiWhiteSpace('\n')
    PsiWhiteSpace('\n')
    PsiComment(comment)('# this rule counts FileOutputStream opens for write from a File')
    PsiWhiteSpace('\n')
    RULE
      PsiElement(KEYWORD_RULE)('RULE')
      PsiWhiteSpace(' ')
      PsiElement(rule name)('count file open write File')
      PsiWhiteSpace('\n')
      CLASS_STATEMENT
        PsiElement(KEYWORD_CLASS)('CLASS')
        PsiWhiteSpace(' ')
        CLASS_NAME
          PsiElement(class reference)('java.io.FileOutputStream')
      PsiWhiteSpace('\n')
      METHOD_STATEMENT
        PsiElement(KEYWORD_METHOD)('METHOD')
        PsiWhiteSpace(' ')
        PsiElement(method reference)('<init>(java.io.File, boolean)')
      PsiWhiteSpace('\n')
      EXIT_LOCATION
        PsiElement(KEYWORD_AT)('AT')
        PsiWhiteSpace(' ')
        PsiElement(KEYWORD_RETURN)('RETURN')
      PsiWhiteSpace('\n')
      IF_STATEMENT
        PsiElement(IF)('IF')
        PsiWhiteSpace(' ')
        CONDITION
          EXPR
            SIMPLE_EXPR
              PsiElement(boolean)('TRUE')
      PsiWhiteSpace('\n')
      DO_STATEMENT
        PsiElement(KEYWORD_DO)('DO')
        PsiWhiteSpace(' ')
        EXPR_ACTIONS
          EXPR
            IDENTIFIER_EXPR
              PsiElement(IDENTIFIER)('incrementCounter')
      PsiElement(LPAREN)('(')
      PsiElement(string)('"')
      PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'file out opens'
        PsiElement(string)('file out opens')
      PsiElement(string)('"')
      PsiElement(RPAREN)(')')
      PsiWhiteSpace('\n')
      PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts FileOutputStream opens for write from a File Descriptor')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count file open write File Descriptor')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('java.io.FileOutputStream')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('<init>(FileDescriptor)')
    PsiWhiteSpace('\n')
    EXIT_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'file out opens'
      PsiElement(string)('file out opens')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts FileInputStream closes for a File input stream')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count file input stream close')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('java.io.FileInputStream')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('close()')
    PsiWhiteSpace('\n')
    EXIT_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'file in closes'
      PsiElement(string)('file in closes')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts FileOutputStream closes for a File output stream')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count file output stream close')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('java.io.FileOutputStream')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('close()')
    PsiWhiteSpace('\n')
    EXIT_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'file out closes'
      PsiElement(string)('file out closes')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')
  PsiWhiteSpace('\n')
  PsiWhiteSpace('\n')
  PsiComment(comment)('# this rule counts class loads which result in a new class being defined')
  PsiWhiteSpace('\n')
  RULE
    PsiElement(KEYWORD_RULE)('RULE')
    PsiWhiteSpace(' ')
    PsiElement(rule name)('count class loads')
    PsiWhiteSpace('\n')
    CLASS_STATEMENT
      PsiElement(KEYWORD_CLASS)('CLASS')
      PsiWhiteSpace(' ')
      CLASS_NAME
        PsiElement(class reference)('^java.lang.ClassLoader')
    PsiWhiteSpace('\n')
    METHOD_STATEMENT
      PsiElement(KEYWORD_METHOD)('METHOD')
      PsiWhiteSpace(' ')
      PsiElement(method reference)('defineClass(String, byte[], int, int, ProtectionDomain)')
    PsiWhiteSpace('\n')
    EXIT_LOCATION
      PsiElement(KEYWORD_AT)('AT')
      PsiWhiteSpace(' ')
      PsiElement(KEYWORD_RETURN)('RETURN')
    PsiWhiteSpace('\n')
    IF_STATEMENT
      PsiElement(IF)('IF')
      PsiWhiteSpace(' ')
      CONDITION
        EXPR
          SIMPLE_EXPR
            PsiElement(boolean)('TRUE')
    PsiWhiteSpace('\n')
    DO_STATEMENT
      PsiElement(KEYWORD_DO)('DO')
      PsiWhiteSpace(' ')
      EXPR_ACTIONS
        EXPR
          IDENTIFIER_EXPR
            PsiElement(IDENTIFIER)('incrementCounter')
    PsiElement(LPAREN)('(')
    PsiElement(string)('"')
    PsiErrorElement:'.', ';', COMMA, LSQUARE or RPAREN expected, got 'class loads'
      PsiElement(string)('class loads')
    PsiElement(string)('"')
    PsiElement(RPAREN)(')')
    PsiWhiteSpace('\n')
    PsiElement(KEYWORD_ENDRULE)('ENDRULE')