Byteman:COMMENT;"########################################################################\n# JBoss, Home of Professional Open Source\n# Copyright 2010, Red Hat and individual contributors\n# by the @authors tag. See the copyright.txt in the distribution for a\n# full listing of individual contributors.\n#\n# This is free software; you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as\n# published by the Free Software Foundation; either version 2.1 of\n# the License, or (at your option) any later version.\n#\n# This software is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this software; if not, write to the Free\n# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n# 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n#\n# @authors Andrew Dinn\n#\n# JVM Statistics Display via a Dynamic MBean\n#\n# A variant of the PeriodicStats script which counts the occurence of\n# various events in the JVM and makes the stats available via a JMX\n# Dynamic MBean\n#\n# to use ths script to trace execution of java program org.my.App execute\n#\n#  -- set the directory in which byteman has been installed\n#  BYTEMAN_HOME= ...\n#\n#   -- identify the samples helper jar\n#   SAMPLE_JAR=${BYTEMAN_HOME}/sample/lib/byteman-sample.jar\n#\n#   -- identify this script\n#   SCRIPT={BYTEMAN_HOME}/sample/scripts/JVMMBeanStats.txt\n#\n#  ${BYTEMAN_HOME}/bin/bmjava.sh -l $SCRIPT -b $SAMPLE_JAR org.my.App\n#\n# alternatively to load the script dynamically\n#\n#   -- start the program with the agent\n#  ${BYTEMAN_HOME}/bin/bmjava.sh org.my.App\n#\n#   -- install the helper library into the bootstrap classpath\n#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -b $SAMPLE_JAR\n#\n#   -- install the script\n#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -l $SCRIPT\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"########################################################################\n#\n# All rules in this script use class JMXHelper which provides support\n# for sampling and displaying statistics in an MBean. The helper adds a\n# thread in the background when it is activated i.e. when any of the rules\n# which employs the helper is first triggered. The thread is shut down\n# when the helper is deactivated i.e. once all rules using the helper\n# have been uninstalled. At regular intervals the helper thread samples\n# counters updated by the rules and posts new stats to the MBean.\n# The helper will, by default, install its MBeans in the platform\n# MBeanServer. You can override this behavior by setting the JVM\n# system property "org.jboss.byteman.jmx.mbeanserver" to a valid\n# JMX domain name. If an MBeanServer exists with that as its default\n# domain, it will be used, otherwise, an MBeanServer will be created\n# with that domain name as its default. If the system property is\n# set to "*platform*", then the platform MBeanServer will be used.\n#\n# The script attaches a rule to the helper method keyInfo() to define the\n# counters to be sampled by the background thread. The object returned\n# by this rule contains a set of string keys identifying the counters.\n# It also provides each counter with a corresponding desciption\n# and counter type. The type is either: CUMULATIVE meaning that the\n# display tracks the counter total across successive samples; RATE,\n# meaning that the display tracks the rate of change in the counter\n# value per second across the last N samples; or MEAN, meaning\n# that the display tracks the mean value of the counter across\n# the last N samples. n.b. in the last case the sample counts\n# are weighted by the exact length of the sample interval.\n#\n# The script also attaches a rule to helper method samplePeriod. The value\n# 5000 returned by this method is used as the sampling period measured in\n#  milliseconds. If this rule were omitted then the method would returns\n# the default value 10,000.\n#\n# Thirdly, the script attaches a rule to helper method sampleSetSize. The value\n# 3 returned by this method is used to determine how many sample readings to\n# combine when computing the rate of change of a counter or the average value\n# of the counter across each sample period.\n#\n# The remaining rules are used to update the values of the counters displayed\n# in the mbean. They are injected into methods at locations where\n# a statistically significant event occurs and their action, fired when\n# that event needs to be counted, is to incremment the relevant counter.\n#\n# In this example the rules measure various operations in the JVM such as\n# thread, file and class loads operations.\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# ensure all rules employ the JMX helper class.\n"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"HELPER"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"org"
Byteman:DOT;"."
Byteman:IDENTIFIER;"jboss"
Byteman:DOT;"."
Byteman:IDENTIFIER;"byteman"
Byteman:DOT;"."
Byteman:IDENTIFIER;"sample"
Byteman:DOT;"."
Byteman:IDENTIFIER;"helper"
Byteman:DOT;"."
Byteman:IDENTIFIER;"JMXHelper"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when the periodic helper thread starts\n# it returns a KeyInfo object identifying the stats counters\n# updated by rules in this rule set\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"return"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"key"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"info"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"JMXHelper"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:BIND_KEYWORD;"BIND"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
WHITE_SPACE;" "
Byteman:COLON;":"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
WHITE_SPACE;" "
Byteman:ASSIGN;"="
WHITE_SPACE;" "
Byteman:NEW_KEYWORD;"new"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""JVM Statistics in a Dynamic MBean""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread creates""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread starts""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.start() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread runs""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.run() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread exits""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.exit() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread creates""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread starts""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.start() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread runs""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.run() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread exits""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.exit() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in opens""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileInputStream.open() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out opens""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileOutputStream.open() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in closes""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileInputStream.close() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out closes""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileOutputStream.close() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""class loads""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""ClassLoader.defineClass() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""class loads""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""ClassLoader.defineClass() mean calls per sample""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when the periodic helper thread starts\n# it returns a sample period in milliseconds for which the\n# periodic helper thread sits and waits before sampling each\n# of the counters anf updating the MBean\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"set"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"period"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"JMXHelper"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"samplePeriod"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;" "
Byteman:INTEGER_LITERAL;"5000"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when the periodic helper thread starts\n# it returns a count for the number of samples which will be\n# combined when computing counter rates or counter sample period\n# means\n"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"set"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"sample"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"set"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"size"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"JMXHelper"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"sampleSetSize"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;" "
Byteman:INTEGER_LITERAL;"3"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts\n# it returns a boolean which determines whether the helper thread\n# creates a JMX Connector Server, allowing the MBean stats to be\n# fetched by a remote client using RMI. The default implemenation of\n# the trigger method returns false. If you want to be able to fetch\n# the MBean stats form a remote client uncomment this rule so  that\n# it injects code returning true.\n# RULE configure rmi server\n# CLASS JMXHelper\n# METHOD rmiServerRequired()\n# IF TRUE\n# DO RETURN TRUE\n# ENDRULE\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts\n# but only if the previous rule has requested that an rmi server\n# be installed. it returns a host address used when creating the\n# server socket. the trigger method returns "localhost" as the\n# default host. if you want to use a  different host then uncommment\n# this rule and insert a suitable address\n# RULE configure rmi host\n# CLASS JMXHelper\n# METHOD rmiHost()\n# IF TRUE\n# DO RETURN "<replace me with a hostname or address>"\n# ENDRULE\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts\n# but only if the previous rule has requested that an rmi server\n# be installed. it returns a port used when creating the\n# server socket. the trigger method returns 9999 as the\n# default host. if you want to use a  different host then uncommment\n# this rule and edit the port number\n# RULE configure rmi host\n# CLASS JMXHelper\n# METHOD rmiHost()\n# IF TRUE\n# DO RETURN <replace me with a port number>\n# ENDRULE\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# The remaining rules increment stats counters whenever a sigificant\n# event occurs in the JVM.\n"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# this rule counts Thread creates\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"thread"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"create"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"lang"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:LT;"<"
Byteman:IDENTIFIER;"init"
Byteman:GT;">"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"EXIT"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""create thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread creates""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts Thread starts\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"thread"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"start"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"lang"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"start"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"CALL"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"start0"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""start thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread starts""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts Thread runs\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"thread"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"run"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:BXOR;"^"
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"lang"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"run"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count run when called from JVM i.e. when there is no caller frame\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:NOT;"!"
Byteman:IDENTIFIER;"callerMatches"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;"".*""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""run thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread runs""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts Thread exits\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"thread"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"exit"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:BXOR;"^"
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"lang"
Byteman:DOT;"."
Byteman:IDENTIFIER;"Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"exit"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""exit thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread exits""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileInputStream opens for read from a File\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"file"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"open"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"read"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"File"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileInputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:LT;"<"
Byteman:IDENTIFIER;"init"
Byteman:GT;">"
Byteman:LPAREN;"("
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"File"
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open input file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:STRING_LITERAL;"" ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileInputStream opens for read from a File Descriptor\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"file"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"open"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"read"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"File"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"Descriptor"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileInputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:LT;"<"
Byteman:IDENTIFIER;"init"
Byteman:GT;">"
Byteman:LPAREN;"("
Byteman:IDENTIFIER;"FileDescriptor"
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open input file 2 ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileOutputStream opens for write from a File\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"file"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"open"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"write"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"File"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileOutputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:LT;"<"
Byteman:IDENTIFIER;"init"
Byteman:GT;">"
Byteman:LPAREN;"("
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"File"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"boolean"
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open output file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:STRING_LITERAL;"" ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileOutputStream opens for write from a File Descriptor\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"file"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"open"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"write"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"File"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"Descriptor"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileOutputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:LT;"<"
Byteman:IDENTIFIER;"init"
Byteman:GT;">"
Byteman:LPAREN;"("
Byteman:IDENTIFIER;"FileDescriptor"
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open output file 2 ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileInputStream closes for a File input stream\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"file"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"input"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"stream"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"close"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:BXOR;"^"
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileInputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"close"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:BIND_KEYWORD;"BIND"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;" "
Byteman:COLON;":"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileDescriptor"
WHITE_SPACE;" "
Byteman:ASSIGN;"="
WHITE_SPACE;" "
Byteman:NULL_LITERAL;"null"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# don't count if this is a call to super or if the file has already been closed\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:NOT;"!"
Byteman:IDENTIFIER;"callerMatches"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;"".*\.close""
Byteman:RPAREN;")"
WHITE_SPACE;" "
Byteman:AND;"&&"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
WHITE_SPACE;" "
Byteman:NE;"!="
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""close input file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in closes""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileOutputStream closes for a File output stream\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"file"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"output"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"stream"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"close"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:BXOR;"^"
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileOutputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"close"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:BIND_KEYWORD;"BIND"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;" "
Byteman:COLON;":"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileDescriptor"
WHITE_SPACE;" "
Byteman:ASSIGN;"="
WHITE_SPACE;" "
Byteman:NULL_LITERAL;"null"
WHITE_SPACE;"\n "
Byteman:COMMENT;"# don't count if this is a call to super or if the file has already been closed\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:NOT;"!"
Byteman:IDENTIFIER;"callerMatches"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;"".*\.close""
Byteman:RPAREN;")"
WHITE_SPACE;"  "
Byteman:AND;"&&"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
WHITE_SPACE;" "
Byteman:NE;"!="
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""close output file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out closes""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts class loads which result in a new class being defined\n"
Byteman:RULE_KEYWORD;"RULE"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"count"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"class"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"loads"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS"
WHITE_SPACE;" "
Byteman:BXOR;"^"
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"lang"
Byteman:DOT;"."
Byteman:IDENTIFIER;"ClassLoader"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"defineClass"
Byteman:LPAREN;"("
Byteman:IDENTIFIER;"String"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"byte"
Byteman:LSQUARE;"["
Byteman:RSQUARE;"]"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"int"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"int"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"ProtectionDomain"
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful loads\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""define class ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""class loads""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n\n\n\n"
