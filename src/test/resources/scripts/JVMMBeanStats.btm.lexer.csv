Byteman:COMMENT;"########################################################################"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# JBoss, Home of Professional Open Source"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# Copyright 2010, Red Hat and individual contributors"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# by the @authors tag. See the copyright.txt in the distribution for a"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# full listing of individual contributors."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# This is free software; you can redistribute it and/or modify it"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# under the terms of the GNU Lesser General Public License as"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# published by the Free Software Foundation; either version 2.1 of"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# the License, or (at your option) any later version."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# This software is distributed in the hope that it will be useful,"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# but WITHOUT ANY WARRANTY; without even the implied warranty of"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# Lesser General Public License for more details."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# You should have received a copy of the GNU Lesser General Public"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# License along with this software; if not, write to the Free"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# 02110-1301 USA, or see the FSF site: http://www.fsf.org."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# @authors Andrew Dinn"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# JVM Statistics Display via a Dynamic MBean"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# A variant of the PeriodicStats script which counts the occurence of"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# various events in the JVM and makes the stats available via a JMX"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# Dynamic MBean"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# to use ths script to trace execution of java program org.my.App execute"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#  -- set the directory in which byteman has been installed"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#  BYTEMAN_HOME= ..."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#   -- identify the samples helper jar"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#   SAMPLE_JAR=${BYTEMAN_HOME}/sample/lib/byteman-sample.jar"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#   -- identify this script"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#   SCRIPT={BYTEMAN_HOME}/sample/scripts/JVMMBeanStats.txt"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#  ${BYTEMAN_HOME}/bin/bmjava.sh -l $SCRIPT -b $SAMPLE_JAR org.my.App"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# alternatively to load the script dynamically"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#   -- start the program with the agent"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#  ${BYTEMAN_HOME}/bin/bmjava.sh org.my.App"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#   -- install the helper library into the bootstrap classpath"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -b $SAMPLE_JAR"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#   -- install the script"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#  ${BYTEMAN_HOME}/bin/bmsubmit.sh -l $SCRIPT"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"########################################################################"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# All rules in this script use class JMXHelper which provides support"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# for sampling and displaying statistics in an MBean. The helper adds a"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# thread in the background when it is activated i.e. when any of the rules"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# which employs the helper is first triggered. The thread is shut down"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# when the helper is deactivated i.e. once all rules using the helper"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# have been uninstalled. At regular intervals the helper thread samples"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# counters updated by the rules and posts new stats to the MBean."
WHITE_SPACE;"\n"
Byteman:COMMENT;"# The helper will, by default, install its MBeans in the platform"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# MBeanServer. You can override this behavior by setting the JVM"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# system property "org.jboss.byteman.jmx.mbeanserver" to a valid"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# JMX domain name. If an MBeanServer exists with that as its default"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# domain, it will be used, otherwise, an MBeanServer will be created"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# with that domain name as its default. If the system property is"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# set to "*platform*", then the platform MBeanServer will be used."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# The script attaches a rule to the helper method keyInfo() to define the"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# counters to be sampled by the background thread. The object returned"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# by this rule contains a set of string keys identifying the counters."
WHITE_SPACE;"\n"
Byteman:COMMENT;"# It also provides each counter with a corresponding desciption"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# and counter type. The type is either: CUMULATIVE meaning that the"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# display tracks the counter total across successive samples; RATE,"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# meaning that the display tracks the rate of change in the counter"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# value per second across the last N samples; or MEAN, meaning"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# that the display tracks the mean value of the counter across"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# the last N samples. n.b. in the last case the sample counts"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# are weighted by the exact length of the sample interval."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# The script also attaches a rule to helper method samplePeriod. The value"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# 5000 returned by this method is used as the sampling period measured in"
WHITE_SPACE;"\n"
Byteman:COMMENT;"#  milliseconds. If this rule were omitted then the method would returns"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# the default value 10,000."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# Thirdly, the script attaches a rule to helper method sampleSetSize. The value"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# 3 returned by this method is used to determine how many sample readings to"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# combine when computing the rate of change of a counter or the average value"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# of the counter across each sample period."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# The remaining rules are used to update the values of the counters displayed"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# in the mbean. They are injected into methods at locations where"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# a statistically significant event occurs and their action, fired when"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# that event needs to be counted, is to incremment the relevant counter."
WHITE_SPACE;"\n"
Byteman:COMMENT;"#"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# In this example the rules measure various operations in the JVM such as"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# thread, file and class loads operations."
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# ensure all rules employ the JMX helper class."
WHITE_SPACE;"\n\n"
Byteman:HELPER_KEYWORD;"HELPER "
Byteman:CLASS_REF;"org.jboss.byteman.sample.helper.JMXHelper"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when the periodic helper thread starts"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# it returns a KeyInfo object identifying the stats counters"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# updated by rules in this rule set"
WHITE_SPACE;"\n\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"return key info"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"JMXHelper"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"keyInfo()"
WHITE_SPACE;"\n"
Byteman:BIND_KEYWORD;"BIND"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
WHITE_SPACE;" "
Byteman:COLON;":"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
WHITE_SPACE;" "
Byteman:ASSIGN;"="
WHITE_SPACE;" "
Byteman:NEW_KEYWORD;"new"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""JVM Statistics in a Dynamic MBean""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread creates""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread starts""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.start() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread runs""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.run() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread exits""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.exit() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread creates""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread starts""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.start() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread runs""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.run() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread exits""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""Thread.exit() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in opens""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileInputStream.open() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out opens""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileOutputStream.open() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in closes""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileInputStream.close() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out closes""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_RATE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""FileOutputStream.close() calls per second""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""class loads""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_CUMULATIVE"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""ClassLoader.defineClass() total calls""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"keyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"addKey"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""class loads""
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:IDENTIFIER;"KeyInfo"
Byteman:DOT;"."
Byteman:IDENTIFIER;"KEY_TYPE_MEAN"
Byteman:COMMA;","
WHITE_SPACE;" "
Byteman:STRING_LITERAL;""ClassLoader.defineClass() mean calls per sample""
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"keyInfo"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when the periodic helper thread starts"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# it returns a sample period in milliseconds for which the"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# periodic helper thread sits and waits before sampling each"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# of the counters anf updating the MBean"
WHITE_SPACE;"\n\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"set period"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"JMXHelper"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"samplePeriod()"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;" "
Byteman:INTEGER_LITERAL;"5000"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule is triggered when the periodic helper thread starts"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# it returns a count for the number of samples which will be"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# combined when computing counter rates or counter sample period"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# means"
WHITE_SPACE;"\n\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"set sample set size"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"JMXHelper"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"sampleSetSize()"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;" "
Byteman:INTEGER_LITERAL;"3"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# it returns a boolean which determines whether the helper thread"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# creates a JMX Connector Server, allowing the MBean stats to be"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# fetched by a remote client using RMI. The default implemenation of"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# the trigger method returns false. If you want to be able to fetch"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# the MBean stats form a remote client uncomment this rule so  that"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# it injects code returning true."
WHITE_SPACE;"\n"
Byteman:COMMENT;"# RULE configure rmi server"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# CLASS JMXHelper"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# METHOD rmiServerRequired()"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# IF TRUE"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# DO RETURN TRUE"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# but only if the previous rule has requested that an rmi server"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# be installed. it returns a host address used when creating the"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# server socket. the trigger method returns "localhost" as the"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# default host. if you want to use a  different host then uncommment"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# this rule and insert a suitable address"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# RULE configure rmi host"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# CLASS JMXHelper"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# METHOD rmiHost()"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# IF TRUE"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# DO RETURN "<replace me with a hostname or address>""
WHITE_SPACE;"\n"
Byteman:COMMENT;"# ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# This rule is triggered when the periodic helper thread starts"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# but only if the previous rule has requested that an rmi server"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# be installed. it returns a port used when creating the"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# server socket. the trigger method returns 9999 as the"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# default host. if you want to use a  different host then uncommment"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# this rule and edit the port number"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# RULE configure rmi host"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# CLASS JMXHelper"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# METHOD rmiHost()"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# IF TRUE"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# DO RETURN <replace me with a port number>"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# The remaining rules increment stats counters whenever a sigificant"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# event occurs in the JVM."
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts Thread creates"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count thread create"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"java.lang.Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"<init>"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"EXIT"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""create thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread creates""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts Thread starts"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count thread start"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"java.lang.Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"start()"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"CALL"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"start0"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""start thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread starts""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts Thread runs"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count thread run"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"^java.lang.Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"run()"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count run when called from JVM i.e. when there is no caller frame"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:NOT;"!"
Byteman:IDENTIFIER;"callerMatches"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;"".*""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""run thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread runs""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts Thread exits"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count thread exit"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"^java.lang.Thread"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"exit()"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""exit thread ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;"))"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""thread exits""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileInputStream opens for read from a File"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count file open read File"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"java.io.FileInputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"<init>(java.io.File)"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open input file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:STRING_LITERAL;"" ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileInputStream opens for read from a File Descriptor"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count file open read File Descriptor"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"java.io.FileInputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"<init>(FileDescriptor)"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open input file 2 ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileOutputStream opens for write from a File"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count file open write File"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"java.io.FileOutputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"<init>(java.io.File, boolean)"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open output file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:DOT;"."
Byteman:IDENTIFIER;"getName"
Byteman:LPAREN;"("
Byteman:RPAREN;")"
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:STRING_LITERAL;"" ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileOutputStream opens for write from a File Descriptor"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count file open write File Descriptor"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"java.io.FileOutputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"<init>(FileDescriptor)"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful opens i.e. ones where we reach return"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""open output file 2 ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out opens""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileInputStream closes for a File input stream"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count file input stream close"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"^java.io.FileInputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"close()"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:BIND_KEYWORD;"BIND"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;" "
Byteman:COLON;":"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileDescriptor"
WHITE_SPACE;" "
Byteman:ASSIGN;"="
WHITE_SPACE;" "
Byteman:NULL_LITERAL;"null"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# don't count if this is a call to super or if the file has already been closed"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:NOT;"!"
Byteman:IDENTIFIER;"callerMatches"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;"".*\.close""
Byteman:RPAREN;")"
WHITE_SPACE;" "
Byteman:AND;"&&"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
WHITE_SPACE;" "
Byteman:NE;"!="
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""close input file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file in closes""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts FileOutputStream closes for a File output stream"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count file output stream close"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"^java.io.FileOutputStream"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"close()"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:BIND_KEYWORD;"BIND"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;" "
Byteman:COLON;":"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"java"
Byteman:DOT;"."
Byteman:IDENTIFIER;"io"
Byteman:DOT;"."
Byteman:IDENTIFIER;"FileDescriptor"
WHITE_SPACE;" "
Byteman:ASSIGN;"="
WHITE_SPACE;" "
Byteman:NULL_LITERAL;"null"
WHITE_SPACE;"\n "
Byteman:COMMENT;"# don't count if this is a call to super or if the file has already been closed"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:NOT;"!"
Byteman:IDENTIFIER;"callerMatches"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;"".*\.close""
Byteman:RPAREN;")"
WHITE_SPACE;"  "
Byteman:AND;"&&"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
WHITE_SPACE;" "
Byteman:NE;"!="
WHITE_SPACE;" "
Byteman:IDENTIFIER;"nullfd"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""close output file ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$0"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:DOT;"."
Byteman:IDENTIFIER;"fd"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""file out closes""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n"
Byteman:COMMENT;"# this rule counts class loads which result in a new class being defined"
WHITE_SPACE;"\n"
Byteman:RULE_KEYWORD;"RULE "
Byteman:RULE_NAME;"count class loads"
WHITE_SPACE;"\n"
Byteman:CLASS_KEYWORD;"CLASS "
Byteman:CLASS_REF;"^java.lang.ClassLoader"
WHITE_SPACE;"\n"
Byteman:METHOD_KEYWORD;"METHOD "
Byteman:METHOD_REF;"defineClass(String, byte[], int, int, ProtectionDomain)"
WHITE_SPACE;"\n"
Byteman:COMMENT;"# only count successful loads"
WHITE_SPACE;"\n"
Byteman:IDENTIFIER;"AT"
WHITE_SPACE;" "
Byteman:RETURN_KEYWORD;"RETURN"
WHITE_SPACE;"\n"
Byteman:IF_KEYWORD;"IF"
WHITE_SPACE;" "
Byteman:TRUE_KEYWORD;"TRUE"
WHITE_SPACE;"\n"
Byteman:DO_KEYWORD;"DO"
WHITE_SPACE;" "
Byteman:IDENTIFIER;"debug"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""define class ""
WHITE_SPACE;" "
Byteman:PLUS;"+"
WHITE_SPACE;" "
Byteman:DOLLAR;"$1"
Byteman:RPAREN;")"
Byteman:SEMI;";"
WHITE_SPACE;"\n   "
Byteman:IDENTIFIER;"incrementCounter"
Byteman:LPAREN;"("
Byteman:STRING_LITERAL;""class loads""
Byteman:RPAREN;")"
WHITE_SPACE;"\n"
Byteman:ENDRULE_KEYWORD;"ENDRULE"
WHITE_SPACE;"\n\n\n\n\n"
